// main global script file
// called when the game starts, before the first room is loaded

// =======================================================================================
function game_start() 
{
  SetRestartPoint();
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

void ShowOptions()
{
    Verbs.UpdateActionBar();
    OptionGui.ShowOptions();
}


// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode, int mod) 
{
  if (keycode == eKeyF5) ShowOptions();
  if (keycode == eKeyF12)   SaveScreenShot("scrnshot.pcx");  // F12
  if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyC || keycode == eKeyQ) gQuit.Visible=true;  // Ctrl-C or CTRL-Q QUIT
    if (keycode == eKeyS) Debug(0,0); // Ctrl-S, give all inventory
    if (keycode == eKeyV) Debug(1,0); // Ctrl-V, version
    if (keycode == eKeyA) Debug(2,3); // Ctrl-A, show walkable areas
    if (keycode == eKeyX) Debug(3,0); // Ctrl-X, teleport to ro 
  }
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{

}

function on_event(EventType event, int data) {
  if (event==eEventRestoreGame) {
    Verbs.Localize();
  }
}

function dialog_request(int param) {
}


////////////////////////////////////////////////////////////////////////////////////
// Begin of GUI handling
////////////////////////////////////////////////////////////////////////////////////
function Action_Click(GUIControl *control, MouseButton button) {
  Verbs.SetAction(Verbs.GetButtonAction(control.AsButton));
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control == btnInvUp) invMain.ScrollUp();
  else invMain.ScrollDown();  
}

function btnShowOptions_OnClick(GUIControl *control, MouseButton button)
{
  ShowOptions();
}

function btnOptions_OnClick(GUIControl *control, MouseButton button)
{
    OptionGui.OnClick(control, button);
}

function btnOptions_OnSliderChange(GUIControl *control)
{
    OptionGui.OnSliderChange(control);
}


////////////////////////////////////////////////////////////////////////////////////
// End of GUI handling
////////////////////////////////////////////////////////////////////////////////////


/* Character, Object, Hotspot full blown SAMPLE

function cChar_AnyClick(Character *thisCharacter, CursorMode mode)
{
  // WALK TO
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO 
  else if (Verbs.UsedAction(eGA_TalkTo)) {
    Verbs.Unhandled();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO (characters only)
  else if(Verbs.UsedAction(eGA_GiveTo)) {
    Verbs.Unhandled();
  }  
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Verbs.Unhandled();
  }
  else Verbs.Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();

*/


/***********************************************************************
 * Inventory functions
 * 
 ***********************************************************************/
function iCup_OtherClick(InventoryItem *thisItem, CursorMode mode)
{
  if (Verbs.UsedAction(eGA_Use)) {
    player.Say("Let's spill the liquid and have a look.");
    Wait(10);
    player.LoseInventory(iCup);
    player.AddInventory(iCupEmpty);
    player.AddInventory(iKeyCard);
    player.Say("Voilà, I found a keycard.");
  }
  else if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It is a blue cup, filled with liquid.");
    player.Say("I could swear that there is tiny object shimmering on the ground.");
  }
  else Verbs.Unhandled();
}

function iCupEmpty_OtherClick(InventoryItem *thisItem, CursorMode mode)
{
  if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It is an empty cup.");
  }
  else Verbs.Unhandled();
}

function iKeyCard_OtherClick(InventoryItem *thisItem, CursorMode mode)
{
  if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It is a massive key card. I wonder how it fit in the cup.");
  }
  else Verbs.Unhandled();
}

/***********************************************************************
 * Character functions
 * 
 ***********************************************************************/
function cHologram_AnyClick(Character *thisCharacter, CursorMode mode)
{
  //Walk to
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO
  if (Verbs.UsedAction(eGA_TalkTo)) {
    dDialog1.Start();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
   Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO
  else if (Verbs.UsedAction(eGA_GiveTo)) {
    player.Say("Do you want this?");
    cHologram.Say("I have no pockets.");
  }
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    player.Say("A hologram has no pockets.");
  }
  else Verbs.Unhandled();
  }

////////////////////////////////////////////////////////////////////////////////////
// Own function
////////////////////////////////////////////////////////////////////////////////////
function fObject_open_close(Object *theObject, int open_img,  int closed_img,  bool verb_is_open)
{
  if (verb_is_open)
  {
    if (theObject.GetProperty("closed")) 
        {
          theObject.Graphic = open_img;
          theObject.SetProperty("closed", 0);
        }
    }
  else
  {
    if (!theObject.GetProperty("closed")) 
        {
          theObject.Graphic = closed_img;
          theObject.SetProperty("closed", 1);
        }
    }
}

function iBahncard_OtherClick(InventoryItem *theItem, CursorMode mode)
{
  if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("Da wo eigentlich der Name steht ist nur ein leeres Feld.");
    if (iBahncard.GetProperty("locked")) {
      player.Say("So kann man die nicht benutzen");
    }      
  } 

}

function iBrief_OtherClick(InventoryItem *theItem, CursorMode mode)
{
  if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("Hm, er ist nicht an mich adressiert.");
    player.Say("Da steht : Herr Winter, Schmale Gasse 13. Der Ort stimmt.");
    iBrief.SetProperty("locked2", 0);
  }
  else if (Verbs.UsedAction(eGA_Open)) {
   player.Say("Hm, er ist nicht an mich adressiert.");
    if (iBrief.GetProperty("locked") || iBrief.GetProperty("locked2")) {
      player.Say("Ich mache ihn lieber nicht auf. Er ist ja nicht für mich");
    }      
    else {
        player.Say("Nagut, ich mache ihn auf. Aber nur weil es das Haus nicht mehr gibt");
        player.LoseInventory(iBrief);
        player.AddInventory(iBahncard);
        player.Say("Da ist nur eine Bahncard drin. Den leeren Umschlag tue ich gleich ins Altpapier");
    }
  } 

  else Verbs.Unhandled();
}
